/* The following code was generated by JFlex 1.4.1 on 12/14/14 4:40 PM */

/*
 * Generated on 12/14/14 4:40 PM
 */
package GUI.utilities;

import java.io.*;
import javax.swing.text.Segment;

import org.fife.ui.rsyntaxtextarea.*;


/**
 * 
 */

public class MicroTokenMaker extends AbstractJFlexTokenMaker {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int EOL_COMMENT = 3;
  public static final int DOCCOMMENT = 2;
  public static final int YYINITIAL = 0;
  public static final int MLC = 1;

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\21\1\10\1\0\1\21\1\17\22\0\1\21\1\41\1\15"+
    "\1\20\1\1\1\45\1\43\1\7\2\42\1\23\1\44\1\37\1\27"+
    "\1\25\1\22\1\4\1\16\1\16\1\16\1\6\1\6\1\6\1\6"+
    "\2\3\1\51\1\37\1\100\1\77\1\101\1\41\1\40\1\54\1\57"+
    "\1\5\1\55\1\60\1\5\2\1\1\56\1\62\1\1\1\63\1\64"+
    "\1\70\1\71\1\65\1\61\1\53\1\73\1\72\1\67\1\1\1\66"+
    "\3\1\1\42\1\11\1\42\1\102\1\2\1\0\1\33\1\14\1\75"+
    "\1\74\1\26\1\32\1\1\1\46\1\50\2\1\1\34\1\1\1\13"+
    "\1\76\1\47\1\1\1\31\1\35\1\30\1\12\1\1\1\52\1\24"+
    "\2\1\1\36\1\103\1\36\1\41\uff81\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\4\0\2\1\2\2\1\3\1\4\1\5\1\1\1\6"+
    "\2\7\1\1\1\7\2\1\1\10\3\7\10\1\3\7"+
    "\1\11\1\12\4\11\1\13\5\11\1\14\3\11\1\0"+
    "\1\15\1\0\2\15\1\3\1\16\1\0\1\3\2\5"+
    "\1\17\2\0\1\20\1\21\1\22\2\1\1\23\5\1"+
    "\1\24\3\1\1\25\16\0\1\22\1\0\1\26\1\3"+
    "\1\27\2\3\1\16\1\3\1\5\1\30\1\5\2\0"+
    "\1\31\2\1\1\24\2\1\4\0\1\32\11\0\1\3"+
    "\1\5\2\0\1\33\2\0\1\34\2\0\1\35\2\0"+
    "\1\36\1\0\1\3\1\5\11\0\1\3\1\5\1\0"+
    "\1\37\6\0";

  private static int [] zzUnpackAction() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0110\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8"+
    "\0\u03fc\0\u0440\0\u0484\0\u0110\0\u0110\0\u04c8\0\u050c\0\u0550"+
    "\0\u0594\0\u05d8\0\u061c\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770"+
    "\0\u07b4\0\u07f8\0\u083c\0\u0110\0\u0880\0\u08c4\0\u0908\0\u094c"+
    "\0\u0110\0\u0990\0\u09d4\0\u0a18\0\u0a5c\0\u0aa0\0\u0110\0\u0ae4"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\u03b8\0\u0c38\0\u0c7c\0\u0cc0"+
    "\0\u0110\0\u0d04\0\u0d48\0\u0d8c\0\u0dd0\0\u0110\0\u0e14\0\u0e58"+
    "\0\u0110\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0154\0\u0fac\0\u0ff0"+
    "\0\u1034\0\u1078\0\u10bc\0\u0154\0\u1100\0\u1144\0\u1188\0\u0110"+
    "\0\u11cc\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8"+
    "\0\u13ec\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8"+
    "\0\u0c7c\0\u160c\0\u0110\0\u1650\0\u1694\0\u0d04\0\u16d8\0\u171c"+
    "\0\u0110\0\u1760\0\u17a4\0\u17e8\0\u0110\0\u182c\0\u1870\0\u18b4"+
    "\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c\0\u0110\0\u1a90"+
    "\0\u1ad4\0\u1b18\0\u1b5c\0\u1ba0\0\u1be4\0\u1c28\0\u1c6c\0\u1cb0"+
    "\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u0154\0\u1e04\0\u1e48\0\u1e8c"+
    "\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024\0\u2068\0\u20ac"+
    "\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u1e8c\0\u2200\0\u1f58\0\u2244"+
    "\0\u2024\0\u2288\0\u22cc\0\u2310\0\u2354\0\u0110\0\u2398\0\u23dc"+
    "\0\u2420\0\u2464\0\u24a8\0\u24ec";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\5\2\6\1\7\1\10\1\6\1\7\1\11\1\12"+
    "\1\5\3\6\1\13\1\7\1\5\1\14\1\15\1\16"+
    "\1\17\1\6\1\20\1\6\1\21\1\22\1\6\1\23"+
    "\3\6\1\24\2\5\1\25\1\24\1\26\1\27\1\17"+
    "\3\6\1\25\1\6\1\30\1\31\2\6\1\32\2\6"+
    "\1\33\1\34\1\35\3\6\1\36\2\6\1\37\3\6"+
    "\1\17\1\40\1\41\1\25\1\42\10\43\1\44\12\43"+
    "\1\45\6\43\1\46\13\43\1\47\3\43\1\50\41\43"+
    "\1\51\12\43\1\52\6\43\1\53\13\43\1\54\3\43"+
    "\1\55\31\43\10\56\1\57\21\56\1\60\13\56\1\61"+
    "\3\56\1\62\31\56\105\0\6\6\2\0\1\63\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\25\6\5\0\3\64\2\7\1\64"+
    "\1\7\2\0\4\64\1\0\1\7\1\0\1\64\3\0"+
    "\1\64\1\65\1\66\1\0\6\64\2\0\1\64\5\0"+
    "\3\64\1\0\25\64\5\0\3\64\2\7\1\64\1\7"+
    "\2\0\4\64\1\0\1\7\1\0\1\64\3\0\1\67"+
    "\1\65\1\66\1\0\6\64\2\0\1\64\5\0\3\64"+
    "\1\0\25\64\5\0\7\70\1\71\1\72\1\73\72\70"+
    "\10\13\1\74\1\75\3\13\1\76\66\13\50\0\1\77"+
    "\23\0\1\100\30\0\1\15\104\0\1\101\1\102\53\0"+
    "\1\25\103\0\1\25\7\0\2\103\1\0\1\103\7\0"+
    "\1\103\114\0\1\25\47\0\1\25\5\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\1\6\1\104\4\6\10\0\3\6\1\0\25\6"+
    "\6\0\6\6\2\0\1\63\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\3\6\1\105\2\6\10\0"+
    "\3\6\1\0\25\6\50\0\1\25\104\0\1\25\32\0"+
    "\1\25\5\0\3\6\1\106\1\6\1\106\2\0\1\63"+
    "\3\6\1\0\1\106\5\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\6\6\1\107\16\6\6\0"+
    "\6\6\2\0\1\63\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\3\6"+
    "\1\110\21\6\6\0\6\6\2\0\1\63\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\6\6\1\111\16\6\6\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\2\6\1\112\7\6"+
    "\1\113\12\6\6\0\6\6\2\0\1\63\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\14\6\1\114\10\6\6\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\15\6\1\115\7\6"+
    "\6\0\6\6\2\0\1\63\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\2\6\1\116\14\6\1\113\5\6\6\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\14\6\1\114\1\117"+
    "\7\6\105\0\1\17\104\0\1\17\105\0\1\25\10\43"+
    "\1\0\12\43\1\0\6\43\1\0\13\43\1\0\3\43"+
    "\1\0\31\43\22\0\1\120\111\0\1\121\17\0\1\122"+
    "\63\0\1\123\125\0\1\124\54\0\1\125\110\0\1\126"+
    "\17\0\1\127\63\0\1\130\125\0\1\131\31\0\10\56"+
    "\1\0\21\56\1\0\13\56\1\0\3\56\1\0\31\56"+
    "\30\0\1\132\17\0\1\133\63\0\1\134\125\0\1\135"+
    "\43\0\1\136\71\0\7\64\2\0\4\64\1\0\1\64"+
    "\1\0\1\64\3\0\1\64\1\0\1\64\1\0\6\64"+
    "\2\0\1\64\5\0\3\64\1\0\25\64\5\0\3\64"+
    "\2\137\1\64\1\137\2\0\4\64\1\0\1\137\1\0"+
    "\1\64\3\0\1\64\1\0\1\64\1\140\6\64\2\0"+
    "\1\64\3\0\1\140\1\0\3\64\1\0\25\64\5\0"+
    "\3\64\4\141\2\0\3\64\1\141\1\0\1\141\1\0"+
    "\1\64\3\0\1\64\1\0\1\141\1\0\2\64\2\141"+
    "\2\64\2\0\1\64\5\0\3\64\1\0\2\64\2\141"+
    "\1\64\2\141\13\64\2\141\1\64\5\0\7\142\1\143"+
    "\1\0\73\142\7\0\1\143\74\0\4\142\1\144\1\142"+
    "\1\145\1\146\1\0\1\70\1\147\3\70\1\144\11\142"+
    "\3\70\51\142\11\74\1\150\3\74\1\151\72\74\1\13"+
    "\1\74\2\13\1\0\1\13\1\152\4\13\11\74\3\13"+
    "\51\74\13\0\1\153\123\0\1\154\73\0\1\155\60\0"+
    "\3\64\2\103\1\64\1\103\2\0\4\64\1\0\1\103"+
    "\1\0\1\64\3\0\1\64\1\0\1\66\1\0\6\64"+
    "\2\0\1\64\5\0\3\64\1\0\25\64\6\0\6\6"+
    "\2\0\1\63\1\156\2\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\25\6"+
    "\6\0\6\6\2\0\1\63\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\4\6\1\157\1\6\10\0"+
    "\3\6\1\0\25\6\6\0\6\6\2\0\1\63\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\20\6\1\114\4\6\6\0\6\6"+
    "\2\0\1\63\3\6\1\0\1\6\5\0\1\6\1\0"+
    "\1\6\1\0\6\6\10\0\3\6\1\0\3\6\1\160"+
    "\21\6\6\0\6\6\2\0\1\63\3\6\1\0\1\6"+
    "\5\0\1\6\1\0\1\6\1\0\6\6\10\0\3\6"+
    "\1\0\7\6\1\114\15\6\6\0\6\6\2\0\1\63"+
    "\3\6\1\0\1\6\5\0\1\6\1\0\1\6\1\0"+
    "\6\6\10\0\3\6\1\0\11\6\1\161\13\6\6\0"+
    "\6\6\2\0\1\63\3\6\1\0\1\6\5\0\1\6"+
    "\1\0\1\6\1\0\6\6\10\0\3\6\1\0\13\6"+
    "\1\114\11\6\6\0\6\6\2\0\1\63\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\6\1\0\6\6\10\0"+
    "\3\6\1\0\11\6\1\114\13\6\6\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\16\6\1\162\6\6"+
    "\6\0\6\6\2\0\1\63\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\5\6\1\114\17\6\54\0\1\163\70\0\1\164\77\0"+
    "\1\165\125\0\1\166\53\0\1\167\130\0\1\170\70\0"+
    "\1\171\77\0\1\172\125\0\1\173\100\0\1\174\70\0"+
    "\1\175\77\0\1\176\125\0\1\177\34\0\4\200\5\0"+
    "\1\200\1\0\1\200\7\0\1\200\3\0\2\200\20\0"+
    "\2\200\1\0\2\200\13\0\2\200\6\0\3\64\2\137"+
    "\1\64\1\137\2\0\4\64\1\0\1\137\1\0\1\64"+
    "\3\0\1\64\1\0\1\64\1\0\6\64\2\0\1\64"+
    "\5\0\3\64\1\0\25\64\10\0\2\137\1\0\1\137"+
    "\7\0\1\137\65\0\7\142\1\71\1\0\77\142\1\145"+
    "\1\142\1\145\1\143\1\0\5\142\1\145\71\142\1\70"+
    "\1\142\1\70\1\143\1\0\5\142\1\70\70\142\4\201"+
    "\1\71\1\0\3\142\1\201\1\142\1\201\7\142\1\201"+
    "\3\142\2\201\20\142\2\201\1\142\2\201\13\142\2\201"+
    "\6\142\10\74\1\0\76\74\4\202\2\74\1\150\2\74"+
    "\1\202\1\151\1\202\7\74\1\202\3\74\2\202\20\74"+
    "\2\202\1\74\2\202\13\74\2\202\6\74\35\0\1\203"+
    "\76\0\1\204\54\0\6\6\2\0\1\63\3\6\1\0"+
    "\1\6\5\0\1\6\1\0\1\205\1\0\6\6\10\0"+
    "\3\6\1\0\25\6\6\0\6\6\2\0\1\63\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\1\0\5\6"+
    "\1\156\10\0\3\6\1\0\25\6\6\0\6\6\2\0"+
    "\1\63\3\6\1\0\1\6\5\0\1\6\1\0\1\6"+
    "\1\0\6\6\10\0\3\6\1\0\4\6\1\114\20\6"+
    "\6\0\6\6\2\0\1\63\3\6\1\0\1\6\5\0"+
    "\1\6\1\0\1\6\1\0\6\6\10\0\3\6\1\0"+
    "\1\6\1\114\23\6\6\0\6\6\2\0\1\63\3\6"+
    "\1\0\1\6\5\0\1\6\1\0\1\6\1\0\6\6"+
    "\10\0\3\6\1\0\3\6\1\114\21\6\56\0\1\206"+
    "\60\0\1\163\124\0\1\207\61\0\1\210\127\0\1\211"+
    "\60\0\1\170\124\0\1\212\61\0\1\213\127\0\1\214"+
    "\60\0\1\174\124\0\1\215\61\0\1\216\61\0\4\217"+
    "\5\0\1\217\1\0\1\217\7\0\1\217\3\0\2\217"+
    "\20\0\2\217\1\0\2\217\13\0\2\217\6\0\3\142"+
    "\4\220\1\71\1\0\3\142\1\220\1\142\1\220\7\142"+
    "\1\220\3\142\2\220\20\142\2\220\1\142\2\220\13\142"+
    "\2\220\6\142\3\74\4\221\2\74\1\150\2\74\1\221"+
    "\1\151\1\221\7\74\1\221\3\74\2\221\20\74\2\221"+
    "\1\74\2\221\13\74\2\221\6\74\30\0\1\222\106\0"+
    "\1\223\72\0\1\224\116\0\1\163\13\0\1\206\33\0"+
    "\1\210\1\225\4\210\1\225\2\0\3\210\1\0\1\210"+
    "\1\0\1\225\1\0\1\210\1\225\1\210\1\225\1\210"+
    "\1\225\6\210\1\0\7\225\3\210\1\225\25\210\1\225"+
    "\26\0\1\226\116\0\1\170\13\0\1\211\33\0\1\213"+
    "\1\227\4\213\1\227\2\0\3\213\1\0\1\213\1\0"+
    "\1\227\1\0\1\213\1\227\1\213\1\227\1\213\1\227"+
    "\6\213\1\0\7\227\3\213\1\227\25\213\1\227\26\0"+
    "\1\230\116\0\1\174\13\0\1\214\33\0\1\216\1\231"+
    "\4\216\1\231\2\0\3\216\1\0\1\216\1\0\1\231"+
    "\1\0\1\216\1\231\1\216\1\231\1\216\1\231\6\216"+
    "\1\0\7\231\3\216\1\231\25\216\1\231\7\0\4\232"+
    "\5\0\1\232\1\0\1\232\7\0\1\232\3\0\2\232"+
    "\20\0\2\232\1\0\2\232\13\0\2\232\6\0\3\142"+
    "\4\233\1\71\1\0\3\142\1\233\1\142\1\233\7\142"+
    "\1\233\3\142\2\233\20\142\2\233\1\142\2\233\13\142"+
    "\2\233\6\142\3\74\4\234\2\74\1\150\2\74\1\234"+
    "\1\151\1\234\7\74\1\234\3\74\2\234\20\74\2\234"+
    "\1\74\2\234\13\74\2\234\6\74\31\0\1\235\123\0"+
    "\1\236\54\0\1\210\103\0\1\213\103\0\1\216\64\0"+
    "\4\6\5\0\1\6\1\0\1\6\7\0\1\6\3\0"+
    "\2\6\20\0\2\6\1\0\2\6\13\0\2\6\6\0"+
    "\3\142\4\70\1\71\1\0\3\142\1\70\1\142\1\70"+
    "\7\142\1\70\3\142\2\70\20\142\2\70\1\142\2\70"+
    "\13\142\2\70\6\142\3\74\4\13\2\74\1\150\2\74"+
    "\1\13\1\151\1\13\7\74\1\13\3\74\2\13\20\74"+
    "\2\13\1\74\2\13\13\74\2\13\6\74\12\0\1\237"+
    "\166\0\1\240\36\0\1\241\123\0\1\242\131\0\1\243"+
    "\20\0\1\244\125\0\1\223\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9520];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\4\0\1\11\4\1\1\11\11\1\2\11\16\1\1\11"+
    "\4\1\1\11\5\1\1\11\3\1\1\0\1\1\1\0"+
    "\3\1\1\11\1\0\3\1\1\11\2\0\1\11\16\1"+
    "\1\11\16\0\1\1\1\0\2\1\1\11\5\1\1\11"+
    "\1\1\2\0\1\11\5\1\4\0\1\11\11\0\2\1"+
    "\2\0\1\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\1\0\2\1\11\0\2\1\1\0\1\11\6\0";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[164];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the textposition at the last state to be included in yytext */
  private int zzPushbackPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /* user code: */


	/**
	 * Constructor.  This must be here because JFlex does not generate a
	 * no-parameter constructor.
	 */
	public MicroTokenMaker() {
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addToken(int, int, int)
	 */
	private void addHyperlinkToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, true);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 */
	private void addToken(int tokenType) {
		addToken(zzStartRead, zzMarkedPos-1, tokenType);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param tokenType The token's type.
	 * @see #addHyperlinkToken(int, int, int)
	 */
	private void addToken(int start, int end, int tokenType) {
		int so = start + offsetShift;
		addToken(zzBuffer, start,end, tokenType, so, false);
	}


	/**
	 * Adds the token specified to the current linked list of tokens.
	 *
	 * @param array The character array.
	 * @param start The starting offset in the array.
	 * @param end The ending offset in the array.
	 * @param tokenType The token's type.
	 * @param startOffset The offset in the document at which this token
	 *        occurs.
	 * @param hyperlink Whether this token is a hyperlink.
	 */
	public void addToken(char[] array, int start, int end, int tokenType,
						int startOffset, boolean hyperlink) {
		super.addToken(array, start,end, tokenType, startOffset, hyperlink);
		zzStartRead = zzMarkedPos;
	}


	/**
	 * {@inheritDoc}
	 */
	public String[] getLineCommentStartAndEnd(int languageIndex) {
		return new String[] { "//", null };
	}


	/**
	 * Returns the first token in the linked list of tokens generated
	 * from <code>text</code>.  This method must be implemented by
	 * subclasses so they can correctly implement syntax highlighting.
	 *
	 * @param text The text from which to get tokens.
	 * @param initialTokenType The token type we should start with.
	 * @param startOffset The offset into the document at which
	 *        <code>text</code> starts.
	 * @return The first <code>Token</code> in a linked list representing
	 *         the syntax highlighted text.
	 */
	public Token getTokenList(Segment text, int initialTokenType, int startOffset) {

		resetTokenList();
		this.offsetShift = -text.offset + startOffset;

		// Start off in the proper state.
		int state = Token.NULL;
		switch (initialTokenType) {
						case Token.COMMENT_MULTILINE:
				state = MLC;
				start = text.offset;
				break;

						case Token.COMMENT_DOCUMENTATION:
				state = DOCCOMMENT;
				start = text.offset;
				break;

			default:
				state = Token.NULL;
		}

		s = text;
		try {
			yyreset(zzReader);
			yybegin(state);
			return yylex();
		} catch (IOException ioe) {
			ioe.printStackTrace();
			return new TokenImpl();
		}

	}


	/**
	 * Refills the input buffer.
	 *
	 * @return      <code>true</code> if EOF was reached, otherwise
	 *              <code>false</code>.
	 */
	private boolean zzRefill() {
		return zzCurrentPos>=s.offset+s.count;
	}


	/**
	 * Resets the scanner to read from a new input stream.
	 * Does not close the old reader.
	 *
	 * All internal variables are reset, the old input stream 
	 * <b>cannot</b> be reused (internal buffer is discarded and lost).
	 * Lexical state is set to <tt>YY_INITIAL</tt>.
	 *
	 * @param reader   the new input stream 
	 */
	public final void yyreset(Reader reader) {
		// 's' has been updated.
		zzBuffer = s.array;
		/*
		 * We replaced the line below with the two below it because zzRefill
		 * no longer "refills" the buffer (since the way we do it, it's always
		 * "full" the first time through, since it points to the segment's
		 * array).  So, we assign zzEndRead here.
		 */
		//zzStartRead = zzEndRead = s.offset;
		zzStartRead = s.offset;
		zzEndRead = zzStartRead + s.count - 1;
		zzCurrentPos = zzMarkedPos = zzPushbackPos = s.offset;
		zzLexicalState = YYINITIAL;
		zzReader = reader;
		zzAtBOL  = true;
		zzAtEOF  = false;
	}




  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public MicroTokenMaker(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  public MicroTokenMaker(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }

  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x10000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 192) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public org.fife.ui.rsyntaxtextarea.Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = zzLexicalState;


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 29: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_DOCUMENTATION); start = zzMarkedPos;
          }
        case 32: break;
        case 4: 
          { addNullToken(); return firstToken;
          }
        case 33: break;
        case 23: 
          { addToken(Token.LITERAL_CHAR);
          }
        case 34: break;
        case 17: 
          { start = zzMarkedPos-2; yybegin(MLC);
          }
        case 35: break;
        case 6: 
          { addToken(Token.WHITESPACE);
          }
        case 36: break;
        case 22: 
          { addToken(Token.LITERAL_NUMBER_HEXADECIMAL);
          }
        case 37: break;
        case 24: 
          { addToken(Token.ERROR_STRING_DOUBLE);
          }
        case 38: break;
        case 18: 
          { addToken(Token.LITERAL_NUMBER_FLOAT);
          }
        case 39: break;
        case 8: 
          { addToken(Token.SEPARATOR);
          }
        case 40: break;
        case 1: 
          { addToken(Token.IDENTIFIER);
          }
        case 41: break;
        case 12: 
          { addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
          }
        case 42: break;
        case 16: 
          { start = zzMarkedPos-2; yybegin(EOL_COMMENT);
          }
        case 43: break;
        case 31: 
          { addToken(Token.FUNCTION);
          }
        case 44: break;
        case 3: 
          { addToken(Token.ERROR_CHAR); addNullToken(); return firstToken;
          }
        case 45: break;
        case 5: 
          { addToken(Token.ERROR_STRING_DOUBLE); addNullToken(); return firstToken;
          }
        case 46: break;
        case 20: 
          { addToken(Token.DATA_TYPE);
          }
        case 47: break;
        case 21: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+2-1, Token.COMMENT_MULTILINE);
          }
        case 48: break;
        case 14: 
          { addToken(Token.ERROR_CHAR);
          }
        case 49: break;
        case 27: 
          { addToken(Token.LITERAL_BOOLEAN);
          }
        case 50: break;
        case 26: 
          { yybegin(YYINITIAL); addToken(start,zzStartRead+3-1, Token.COMMENT_DOCUMENTATION);
          }
        case 51: break;
        case 11: 
          { addToken(start,zzStartRead-1, Token.COMMENT_DOCUMENTATION); return firstToken;
          }
        case 52: break;
        case 25: 
          { start = zzMarkedPos-3; yybegin(DOCCOMMENT);
          }
        case 53: break;
        case 15: 
          { addToken(Token.LITERAL_STRING_DOUBLE_QUOTE);
          }
        case 54: break;
        case 30: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_EOL); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_EOL); start = zzMarkedPos;
          }
        case 55: break;
        case 28: 
          { int temp=zzStartRead; addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); addHyperlinkToken(temp,zzMarkedPos-1, Token.COMMENT_MULTILINE); start = zzMarkedPos;
          }
        case 56: break;
        case 19: 
          { addToken(Token.RESERVED_WORD_2);
          }
        case 57: break;
        case 13: 
          { addToken(Token.ERROR_NUMBER_FORMAT);
          }
        case 58: break;
        case 2: 
          { addToken(Token.LITERAL_NUMBER_DECIMAL_INT);
          }
        case 59: break;
        case 7: 
          { addToken(Token.OPERATOR);
          }
        case 60: break;
        case 9: 
          { 
          }
        case 61: break;
        case 10: 
          { addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
          }
        case 62: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            switch (zzLexicalState) {
            case EOL_COMMENT: {
              addToken(start,zzStartRead-1, Token.COMMENT_EOL); addNullToken(); return firstToken;
            }
            case 165: break;
            case DOCCOMMENT: {
              yybegin(YYINITIAL); addToken(start,zzEndRead, Token.COMMENT_DOCUMENTATION); return firstToken;
            }
            case 166: break;
            case YYINITIAL: {
              addNullToken(); return firstToken;
            }
            case 167: break;
            case MLC: {
              addToken(start,zzStartRead-1, Token.COMMENT_MULTILINE); return firstToken;
            }
            case 168: break;
            default:
            return null;
            }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
